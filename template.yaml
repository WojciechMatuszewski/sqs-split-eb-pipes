AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  sqs-split-eb

  Sample SAM Template for sqs-split-eb

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Tracing: Active
  Api:
    TracingEnabled: True

Resources:
  RootQueue:
    Type: AWS::SQS::Queue
    Properties: {}

  RootQueueGatewayAPIPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Sub ${RootQueue.QueueUrl}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Sub ${GatewayResponsePOSTRole.Arn}
            Action:
              - sqs:SendMessage
            Resource: !Sub ${RootQueue.Arn}

  GatewayAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SplitSQSGatewayAPI

  GatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      Name: GatewayAPIModel
      RestApiId: !Sub ${GatewayAPI}
      ContentType: application/json
      Schema:
        type: object
        properties:
          type:
            type: string
          message:
            type: string
        required:
          - type
          - message

  GatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !Sub ${GatewayAPI.RootResourceId}
      RestApiId: !Sub ${GatewayAPI}
      PathPart: message

  GatewayValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: GatewayAPIValidator
      RestApiId: !Sub ${GatewayAPI}
      ValidateRequestBody: true
      ValidateRequestParameters: true

  GatewayResponsePOSTRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies: []

  GatewayResourcePOST:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Sub ${GatewayAPI}
      ResourceId: !Sub ${GatewayResource}
      RequestModels:
        $default: !Sub ${GatewayModel}
      RequestValidatorId: !Sub ${GatewayValidator.RequestValidatorId}
      HttpMethod: POST
      AuthorizationType: AWS_IAM
      Integration:
        Type: AWS
        Credentials: !Sub ${GatewayResponsePOSTRole.Arn}
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${RootQueue.QueueName}
        PassthroughBehavior: NEVER
        RequestParameters:
          "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'"
        RequestTemplates:
          "application/json": Action=SendMessage&MessageBody=$input.body
        IntegrationResponses:
          - StatusCode: "200"
            SelectionPattern: 2\d{2}
            ResponseTemplates:
              application/json: >
                {
                  "message": "Message sent to queue",
                  "messageAttributes": $input.json('$.SendMessageResponse.SendMessageResult'),
                }
          - StatusCode: "400"
            SelectionPattern: 4\d{2}
          - StatusCode: "500"
            SelectionPattern: 5\d{2}
      MethodResponses:
        - StatusCode: "200"
        - StatusCode: "400"

  MessagesLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: sqs-split-eb-messages

  MessagesLogGroup2:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 1
      LogGroupName: /aws/events/sqs-split-eb-messages

  MessagesBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: MessagesBus

  MessagesLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: MessagesLogPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                Resource: !Sub ${MessagesLogGroup2.Arn}

  MessagesLogRuleDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: MessagesLogRuleDLQ

  MessagesLogRuleDLQPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Sub ${MessagesLogRuleDLQ.QueueUrl}
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
            Resource: !Sub ${MessagesLogRuleDLQ.Arn}

  MessagesLogRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: !Sub ${MessagesBus.Name}
      RoleArn: !Sub ${MessagesLogRole.Arn}
      EventPattern:
        account:
          - !Sub ${AWS::AccountId}
      State: ENABLED
      Targets:
        - Arn: !Sub ${MessagesLogGroup2.Arn}
          Id: MessagesLogTarget
          DeadLetterConfig:
            Arn: !Sub ${MessagesLogRuleDLQ.Arn}
          RetryPolicy:
            MaximumEventAgeInSeconds: 60
            MaximumRetryAttempts: 0

  MessagesPipeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pipes.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SQSReceive
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !Sub ${RootQueue.Arn}
        - PolicyName: EventBridgePut
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !Sub ${MessagesBus.Arn}

  MessagesPipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name: MessagesPipe
      RoleArn: !Sub ${MessagesPipeRole.Arn}
      Source: !Sub ${RootQueue.Arn}
      SourceParameters:
        SqsQueueParameters:
          BatchSize: 1
      Target: !Sub ${MessagesBus.Arn}

Outputs:
  API:
    Value: !Sub "https://${GatewayAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/message"
